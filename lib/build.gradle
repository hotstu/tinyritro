apply plugin: 'java-library'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    compileOnly 'com.squareup.okhttp3:okhttp:3.9.1'
    compileOnly 'io.reactivex.rxjava2:rxjava:2.1.8'
    compileOnly "com.google.code.gson:gson:2.8.2"
}

sourceCompatibility = "1.7"
targetCompatibility = "1.7"

apply plugin: 'com.jfrog.bintray'
apply plugin: 'maven-publish'

def keystorePropertiesFile = rootProject.file("local.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
// custom tasks for creating source/javadoc jars
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

// add javadoc/source jar tasks as artifacts
artifacts {
    archives sourcesJar, javadocJar
}

bintray {
    user = keystoreProperties['bintray.user']
    key = keystoreProperties['bintray.key']
    pkg {
        repo = 'maven'
        name = 'tinyritro'
        userOrg = 'hglf'
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/bintray/gradle-bintray-plugin.git'
        version {
            name = '1.0-Final'
            desc = 'Gradle Bintray Plugin 1.0 final'
            released  = new Date()
            vcsTag = '1.3.0'
            attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin']
        }
    }
    publications = ['Production']
}

publishing {
    publications {
        Production(MavenPublication) {
            from components.java
            groupId 'com.domain.sdk'
            artifactId 'payment-module'
            version '1.2.1'

            //The publication doesn't know about our dependencies, so we have to manually add them to the pom
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')

                //Iterate over the compile dependencies (we don't want the test ones), adding a <dependency> node for each
                configurations.compile.allDependencies.each {
                    def dependencyNode = dependenciesNode.appendNode('dependency')
                    dependencyNode.appendNode('groupId', it.group)
                    dependencyNode.appendNode('artifactId', it.name)
                    dependencyNode.appendNode('version', it.version)
                }
            }
        }
    }
}

